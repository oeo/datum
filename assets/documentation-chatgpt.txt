I'm writing documentation for an application using a framework in Coffeescript that uses Mongoose models that self-expose the statics and methods and a REST API. It also creates CRUD routes automatically that all respond the same with pagination.

Here is an example of the CRUD routes generated for a model called `Events`.

- List events with pagination parameters: GET /events?<limit=&page=>
- Get one event by ID: GET /events/:_id 
- Create a new event: POST /events { event: "MY_NEW_EVENT" }
- Update an existing event by ID: POST /events/:_id { event: "UPDATED_EVENT_PROPERTY" }

In the model, if a model method is defined, it always accepts an object as the first parameter. That object represents the form body in the form of an object. Here is an example of a method and how it is exposed:

# mark this notification as read
Notification.methods.markRead = (opt = {}) ->
  return if @timeRead

  @timeRead = helpers.time()
  
  # this comes from the POST body and is optional
  if opt.readBy
    @readBy = opt.readBy

  try
    return await @save()
  catch e
    return e
    
This method is exposed like this: POST /notifications/:_id/markRead { readBy: 'tony' }

Model statics are exposed almost the same way, they just don't required the ID since they are static functions. Here is an example of a model static and how it is exposed:

# check if email avail
Account.statics.emailAvailable = ({ email }) ->
  if !email
    throw new Error "email required"

  if !helpers.validEmail(email = helpers.normalizeEmail(email))
    return next new Error 'email invalid'

  try
    exists = await Accounts
      .findOne { email, emailVerified: true }, [
        '_id'
        'emailVerified'
      ]
      .lean()

    return !!(exists?._id)
  catch e
    throw e
    
This is exposed like this: POST /accounts/emailAvailable { email: 'mynewemail@gmail.com' }.

Any static or model methods that begin with an underscore are considered private functions and are not exposed over the REST API automatically.

Here are the details of the response formatting for this API:

- The response always contains an "ok" attribute
- If the "ok" attribute is false then the response will always contain an error attribute containing the text of the error.
- If the "ok" attribute is true then the response will contain another property called "response" that has the return data for the call.

Here is an example of a successful request response for a model method called changeEvent:

{
  "ok": true,
  "response": {
    "_id": "vBXYrWZyzf",
    "event": "very_unique_event",
    "name": "Chris Miller",
    "mtime": 1716183240,
    "ctime": 1716182212,
    "__v": 0
  },
  "_meta": {
    "path": "/events/vBXYrWZyzf/changeEvent",
    "method": "POST",
    "query": {},
    "body": {
      "method": "post",
      "newEvent": "very_unique_event"
    },
    "filter": {},
    "elapsed": 10
  }
}

Here is an example of a CRUD result generated by calling GET /events:

{
  "ok": true,
  "response": {
    "total": 201,
    "pages": {
      "labelIndexMin": 15,
      "labelIndexMax": 20,
      "offset": 15,
      "page": 3,
      "pageLabel": 4,
      "pageTotalLabel": 41,
      "total": 201,
      "links": [
        {
          "pageNum": 2,
          "label": 3,
          "minOffset": 10,
          "maxOffset": 15,
          "prev": true
        },
        {
          "pageNum": 4,
          "label": 5,
          "minOffset": 20,
          "maxOffset": 25,
          "next": true
        }
      ],
      "hasItems": true
    },
    "items": [
      {
        "_id": "I67j6vPtl3",
        "event": "user_signup",
        "name": "Chris Miller",
        "mtime": 1716182212,
        "ctime": 1716182212,
        "__v": 0
      },
      // ...
      {
        "_id": "VpgJiQBo81",
        "event": "user_login",
        "name": "Tom Joe",
        "mtime": 1716182212,
        "ctime": 1716182212,
        "__v": 0
      }
    ]
  },
  "_meta": {
    "path": "/events",
    "method": "GET",
    "query": {
      "limit": "5",
      "page": "3"
    },
    "filter": {},
    "elapsed": 10
  }
}

Given this information, please provide documentation for the following entity:
